<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classSeatracPinger" kind="class" language="C++" prot="public">
    <compoundname>SeatracPinger</compoundname>
    <basecompoundref prot="public" virt="non-virtual">rclcpp::Node</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classSeatracPinger_1a802f2f7783c50b00e9e5d21d1a647c47" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SeatracPinger::ping_delay_</definition>
        <argsstring></argsstring>
        <name>ping_delay_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="124" column="9" bodyfile="src/modem_pinger.cpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSeatracPinger_1a06950975d59a36344befa5a58277881a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SeatracPinger::n_vehicles_</definition>
        <argsstring></argsstring>
        <name>n_vehicles_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="125" column="9" bodyfile="src/modem_pinger.cpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSeatracPinger_1a540c5d3cf804ca95e42340fe1106692d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SeatracPinger::vehicle_order_</definition>
        <argsstring></argsstring>
        <name>vehicle_order_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="126" column="9" bodyfile="src/modem_pinger.cpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSeatracPinger_1a562caa92a533f06f03687a9851c80502" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SeatracPinger::target_id_</definition>
        <argsstring></argsstring>
        <name>target_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="127" column="9" bodyfile="src/modem_pinger.cpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSeatracPinger_1a6c318f87f7365baca5b1d701684ea119" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SeatracPinger::request_response_</definition>
        <argsstring></argsstring>
        <name>request_response_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="128" column="10" bodyfile="src/modem_pinger.cpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSeatracPinger_1a1bd2c2c71b2ca091657501822d2ed881" prot="private" static="no" mutable="no">
        <type>rclcpp::Publisher&lt; ModemSend &gt;::SharedPtr</type>
        <definition>rclcpp::Publisher&lt;ModemSend&gt;::SharedPtr SeatracPinger::modem_publisher_</definition>
        <argsstring></argsstring>
        <name>modem_publisher_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="129" column="35" bodyfile="src/modem_pinger.cpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classSeatracPinger_1af84310d5559411c1c40e321d6d3cc83f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SeatracPinger::SeatracPinger</definition>
        <argsstring>()</argsstring>
        <name>SeatracPinger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ping_delay_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The time between a ping from any vehicle in the water. For example if Coug 1, Coug 2, and Coug 3 are pinging each other in that order, then this would be the time between pings from Coug 1 and Coug 2. WARNING: ping_delay_seconds should be the same for all vehicles.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_vehicles</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vehicles sending pings. The ping cycle will reset after every vehicle has sent a ping. The length of time for a complete ping cycle, or the time between pings from this vehicle is ping_delay_seconds multiplied by number_of_vehicles. WARNING: number_of_vehicles should be the same for all vehicles.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicle_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The Coug-UV vehicle ID, used to set the beacon ID. Also used to set the vehicle_order if vehicle_order is undefined.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicle_order</parametername>
</parameternamelist>
<parameterdescription>
<para>If specified, the position of this vehicle in the ping order. By default this will be the vehicle_ID, so coug1 will ping first, then coug2, etc.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
WARNING: If specified, vehicle_order should different for all vehicles. If two vehicles have the same vehicle_order, they will send pings at the same time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request_response</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating whether or not to request a response signal from the vehicle you&apos;re addressing this ping to. Response signals can be used to calculate range between vehicles using 2-way-time-of-flight.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
WARNING: If request_response is true, the target_id must not be zero (between 1 and 16), indicating that this acoustic message is addressed to a specific vehicle and not all vehicles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The vehicle to address this ping to. If target_id is zero then the ping sent will be addressed to all vehicles. If the target_id is between 1 and 16, it will address the message to the vehicle with vehicle_ID=target_id.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Acoustic messages are always broadcasted to and received by every vehicle, regardless of which specific vehicle the message is addressed to. However, only the vehicle this message is addressed to will respond with a return message. And so, if request_response is true, this parameter must be set between 1 and 16. If request_response is false, it makes no difference what the target_id is, so you leave it at 0 to send to all beacons.</para>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="39" column="5" bodyfile="src/modem_pinger.cpp" bodystart="39" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classSeatracPinger_1a0b619cae417f9e4aec32accdac5c745e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SeatracPinger::repeat_call_ping</definition>
        <argsstring>()</argsstring>
        <name>repeat_call_ping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="131" column="10" bodyfile="src/modem_pinger.cpp" bodystart="131" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classSeatracPinger_1acb72265d6c8bb5fb3846a9ab9c968620" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SeatracPinger::send_ping</definition>
        <argsstring>()</argsstring>
        <name>send_ping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modem_pinger.cpp" line="151" column="10" bodyfile="src/modem_pinger.cpp" bodystart="151" bodyend="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sends acoustic pings on a schedule. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Clayton Smith </para>
</simplesect>
<simplesect kind="date"><para>September 2024</para>
</simplesect>
Broadcasts acoustic pings over the seatrac x150 beacon on a timed schedule to avoid message overlaps in a fleet of UUVs. Signals are sent in a round-robin style, where each vehicle takes a turn sending a ping. The schedule is managed by the rasberry pi clock in each vehicle, so that it does not depend on every signal being receieved.</para>
<para>The ping schedule is based on 3 parameters: ping_delay_seconds, number_of_vehicles, and vehicle_order, and uses the following formula: ping_cycle_length = ping_delay_seconds * number_of_vehicles seconds_into_cycle = seconds_since_midnight % ping_cycle_length time_until_ping = (ping_delay_seconds * vehicle_order - seconds_into_cycle) % ping_cycle_length</para>
<para>WARNING: raspberry pi clocks should be synchonized between vehicles before using this node.</para>
<para>Publishes:<itemizedlist>
<listitem><para>modem_send (seatrac_interfaces/msg/ModemSend) </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SeatracPinger</label>
        <link refid="classSeatracPinger"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rclcpp::Node</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SeatracPinger</label>
        <link refid="classSeatracPinger"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rclcpp::Node</label>
      </node>
    </collaborationgraph>
    <location file="src/modem_pinger.cpp" line="36" column="1" bodyfile="src/modem_pinger.cpp" bodystart="37" bodyend="159"/>
    <listofallmembers>
      <member refid="classSeatracPinger_1a1bd2c2c71b2ca091657501822d2ed881" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>modem_publisher_</name></member>
      <member refid="classSeatracPinger_1a06950975d59a36344befa5a58277881a" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>n_vehicles_</name></member>
      <member refid="classSeatracPinger_1a802f2f7783c50b00e9e5d21d1a647c47" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>ping_delay_</name></member>
      <member refid="classSeatracPinger_1a0b619cae417f9e4aec32accdac5c745e" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>repeat_call_ping</name></member>
      <member refid="classSeatracPinger_1a6c318f87f7365baca5b1d701684ea119" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>request_response_</name></member>
      <member refid="classSeatracPinger_1af84310d5559411c1c40e321d6d3cc83f" prot="public" virt="non-virtual"><scope>SeatracPinger</scope><name>SeatracPinger</name></member>
      <member refid="classSeatracPinger_1acb72265d6c8bb5fb3846a9ab9c968620" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>send_ping</name></member>
      <member refid="classSeatracPinger_1a562caa92a533f06f03687a9851c80502" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>target_id_</name></member>
      <member refid="classSeatracPinger_1a540c5d3cf804ca95e42340fe1106692d" prot="private" virt="non-virtual"><scope>SeatracPinger</scope><name>vehicle_order_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
